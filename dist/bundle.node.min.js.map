{
  "version": 3,
  "sources": ["../src/model/Auth.ts", "../src/Observable.ts", "../src/Http.ts", "../src/NyxApi.ts", "../src/index.ts"],
  "sourcesContent": ["export class Auth {\n  username?: string\n  token?: string\n  confirmationCode?: string\n\n  constructor(data: any = {}) {\n    this.username = data.username || undefined\n    this.token = data.token || undefined\n    this.confirmationCode = data.confirmationCode || undefined\n  }\n}\n", "import { Fn } from './model'\n\nexport const generateUuidV4 = (): string =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n\nexport class Observable<T> {\n  private readonly id: string\n  private observers: Observer[] = []\n  constructor(id?: string) {\n    this.id = id ?? generateUuidV4()\n  }\n\n  getId(): string {\n    return this.id\n  }\n\n  subscribe(): Observer {\n    return new Observer(this)\n  }\n\n  registerObserver(o: Observer): void {\n    this.observers.push(o)\n  }\n\n  unregisterObserver(o: Observer): void {\n    this.observers.forEach((ob, i) => {\n      if (ob.getId() === o.getId()) {\n        o.emit({ type: 'final', data: null })\n        this.observers.splice(i, 1)\n      }\n    })\n  }\n\n  unregisterObservers(): void {\n    this.finally()\n    this.observers = []\n  }\n\n  emit(data?: any): void {\n    this.observers.forEach(o => o.emit({ type: 'data', data }))\n  }\n\n  error(message: string): void {\n    this.observers.forEach(o => o.emit({ type: 'error', data: message }))\n  }\n\n  finally(): void {\n    this.observers.forEach(o => o.emit({ type: 'final', data: null }))\n  }\n}\n\nexport class Observer {\n  private readonly id: string\n  private observable: Observable<any>\n  private onData?: Fn\n  private onError?: Fn\n  private onFinal?: Fn\n  private isSubscribed = true\n  constructor(observable: Observable<any>) {\n    this.id = generateUuidV4()\n    this.observable = observable\n    this.observable.registerObserver(this)\n  }\n\n  getId(): string {\n    return this.id\n  }\n\n  unsubscribe(): void {\n    this.isSubscribed = false\n    this.observable.unregisterObserver(this)\n  }\n\n  emit({ type, data }: { type: string; data: any }): void {\n    switch (type) {\n      case 'data':\n        if (!this.onData || (!!this.onData && typeof this.onData !== 'function')) {\n          throw Error('no callable in .then() callback!')\n        }\n        this.onData(data)\n        break\n      case 'error':\n        if (!this.onError || (!!this.onError && typeof this.onError !== 'function')) {\n          throw Error(data)\n        }\n        this.onError(data)\n        break\n      case 'final':\n        this.isSubscribed = false\n        if (typeof this.onFinal === 'function') {\n          this.onFinal(data)\n        }\n        break\n    }\n  }\n\n  then(onData: Fn): Observer {\n    if (!onData || (!!onData && typeof onData !== 'function')) {\n      throw Error('no callable in .then() callback!')\n    }\n    this.onData = onData\n    return this\n  }\n\n  error(onError: Fn): Observer {\n    this.onError = onError\n    return this\n  }\n\n  finally(onFinal: Fn): Observer {\n    this.onFinal = onFinal\n    return this\n  }\n}\n", "import { Auth, Context, FetchInit, NyxInit, Response as NyxResponse } from './model'\nimport { Observable } from './Observable'\n\nexport class Http {\n  appName: string\n  protected auth: Auth\n  onContextUpdate: Observable<Context> = new Observable('onContextUpdate')\n  onError: Observable<string> = new Observable('onError')\n  onLogout: Observable<void> = new Observable('onLogout')\n  static DELETE = 'DELETE'\n  static GET = 'GET'\n  static POST = 'POST'\n  static PUT = 'PUT'\n\n  constructor(data: NyxInit) {\n    this.appName = data.appName\n    this.auth = data.auth ?? new Auth()\n  }\n\n  setAuth(auth: Auth): void {\n    this.auth = auth\n  }\n\n  getAuth(): Auth {\n    return this.auth\n  }\n\n  protected getHeaders(contentType = 'application/json'): HeadersInit {\n    return {\n      Accept: contentType,\n      'Content-Type': contentType,\n      Authorization: `Bearer ${this.auth.token}`,\n      'User-Agent': this.appName,\n    }\n  }\n\n  protected async fetch(data: FetchInit): Promise<Partial<NyxResponse | any>> {\n    try {\n      const res = await fetch(`https://nyx.cz/api/${data.endpoint}`, {\n        method: data.method,\n        headers: data.headers || this.getHeaders(),\n        body: data.body,\n      })\n        .then(resp => resp.json())\n        .catch(e => this.processError(e))\n      if (res.error) {\n        return this.processError(res)\n      }\n      if (res?.context) {\n        this.updateContext(res.context)\n      }\n      return res\n    } catch (e) {\n      return this.processError(e)\n    }\n  }\n\n  protected updateContext(ctx: Context): void {\n    this.onContextUpdate.emit(ctx)\n  }\n\n  protected processError(error?: Error | any): NyxResponse {\n    const msg = error?.message || error?.error || 'Chyba spojen\u00ED'\n    this.onError.emit(msg)\n    return { bookmarks: [], discussions: [], posts: [], error: msg, code: error?.code } // todo proper default return\n  }\n}\n", "import { Http } from './Http'\nimport {\n  Auth,\n  BookmarksResponse,\n  Context,\n  DiscussionResponse,\n  DiscussionStatsResponse,\n  HistoryResponse,\n  LastDiscussionsResponse,\n  LastPostsResponse,\n  MailResponse,\n  NotificationsResponse,\n  NyxInit,\n  OnPostUpdatedResponse,\n  Post,\n  RatingsResponse,\n  RemindersResponse,\n  Response as NyxResponse,\n  SearchResponse,\n  UploadFileResponse,\n  WaitingFilesResponse,\n} from './model'\n\nexport class NyxApi extends Http {\n  constructor(data: NyxInit) {\n    super(data)\n  }\n\n  /**\n   * @throws Error\n   */\n  async createAuthToken(username: string): Promise<Auth> {\n    const res = await this.fetch({\n      endpoint: `create_token/${username}`,\n      method: Http.POST,\n      headers: {\n        'User-Agent': this.appName,\n      },\n    })\n    if (res?.token && res.confirmation_code) {\n      this.auth = new Auth({\n        username: username,\n        token: res.token,\n        confirmationCode: res.confirmation_code,\n      })\n      return this.auth\n    } else {\n      throw new Error(res?.error || 'Error requesting token')\n    }\n  }\n\n  async logout(): Promise<void> {\n    await this.deleteAuthToken()\n    this.onLogout.emit()\n  }\n\n  async deleteAuthToken(): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `delete_token/${this.auth.token}`,\n      method: Http.POST,\n    })\n  }\n\n  async getBookmarks(includingSeen = true): Promise<Partial<BookmarksResponse>> {\n    return this.fetch({\n      endpoint: `bookmarks${includingSeen ? '/all' : ''}`,\n      method: Http.GET,\n    })\n  }\n\n  async getHistory(showRead = true, showBooked?: boolean): Promise<Partial<HistoryResponse>> {\n    return this.fetch({\n      endpoint: `bookmarks/history?more_results=true&show_read=${showRead}${\n        showBooked !== undefined ? `&show_booked=${showBooked}` : ''\n      }`,\n      method: Http.GET,\n    })\n  }\n\n  async getContext(): Promise<Partial<Context>> {\n    return this.fetch({\n      endpoint: `status`,\n      method: Http.GET,\n    })\n  }\n\n  async getLastPosts(\n    minRating = 0,\n    isRatedByFriends?: boolean,\n    isRatedByMe?: boolean,\n  ): Promise<Partial<LastPostsResponse>> {\n    return this.fetch({\n      endpoint: `last${minRating > 0 ? `/min_rating/${minRating}` : ''}${isRatedByFriends ? '/rated_by_friends' : ''}${\n        isRatedByMe ? '/rated_by_me' : ''\n      }`,\n      method: Http.GET,\n    })\n  }\n\n  async getLastDiscussions(): Promise<Partial<LastDiscussionsResponse>> {\n    return this.fetch({\n      endpoint: `last/discussions`,\n      method: Http.GET,\n    })\n  }\n\n  async search(phrase: string, isUnified = false, isUsername = false, limit = 20): Promise<Partial<SearchResponse>> {\n    if (isUsername && phrase?.length < 2) {\n      return { exact: [] }\n    }\n    return this.fetch({\n      endpoint: `search${isUnified ? '/unified' : isUsername ? '/username/' : ''}${\n        isUsername ? phrase : `?search=${phrase}&limit=${limit}`\n      }`,\n      method: Http.GET,\n    })\n  }\n\n  async getDiscussion(id: string | number): Promise<Partial<DiscussionResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${id}`,\n      method: Http.GET,\n    })\n  }\n\n  async getDiscussionBoard(id: string | number): Promise<Partial<DiscussionResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${id}/content/home`,\n      method: Http.GET,\n    })\n  }\n\n  async getDiscussionStats(id: string | number): Promise<Partial<DiscussionStatsResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${id}/stats`,\n      method: Http.GET,\n    })\n  }\n\n  async getMail(queryString = ''): Promise<Partial<MailResponse>> {\n    return this.fetch({\n      endpoint: `mail${queryString}`,\n      method: Http.GET,\n    })\n  }\n\n  async getReminders(type: 'bookmarks' | 'mail'): Promise<Partial<RemindersResponse>> {\n    return this.fetch({\n      endpoint: `${type}/reminders`,\n      method: Http.GET,\n    })\n  }\n\n  async getWaitingFiles(discussionId: string | number): Promise<Partial<WaitingFilesResponse>> {\n    return this.fetch({\n      endpoint: `${!discussionId ? 'mail' : `discussion/${discussionId}`}/waiting_files`,\n      method: Http.GET,\n    })\n  }\n\n  async getNotifications(): Promise<Partial<NotificationsResponse>> {\n    return this.fetch({\n      endpoint: `notifications`,\n      method: Http.GET,\n    })\n  }\n\n  async getRating(post: Post): Promise<Partial<RatingsResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${post.discussion_id}/rating/${post.id}`,\n      method: Http.GET,\n    })\n  }\n\n  async ratePost(\n    post: Post,\n    rating: 'positive' | 'negative' | 'negative_visible' | 'remove',\n  ): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${post.discussion_id}/rating/${post.id}/${rating}`,\n      method: Http.POST,\n    })\n  }\n\n  async setReminder(\n    discussionId: string | number,\n    postId: string | number,\n    isReminder: boolean,\n  ): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `${discussionId > 0 ? `discussion/${discussionId}` : 'mail'}/reminder/${postId}/${isReminder}`,\n      method: Http.POST,\n    })\n  }\n\n  async reportPost(postId: string | number): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `report/${postId}`,\n      method: Http.POST,\n    })\n  }\n\n  async sendPrivateMessage(recipient: string, message: string): Promise<Partial<NyxResponse>> {\n    const data: any = { recipient, message }\n    return this.fetch({\n      endpoint: `mail/send`,\n      method: Http.POST,\n      headers: this.getHeaders('application/x-www-form-urlencoded'),\n      body: Object.keys(data)\n        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n        .join('&'),\n    })\n  }\n\n  async bookmarkDiscussion(\n    discussionId: string | number,\n    isBooked: boolean,\n    categoryId?: number,\n  ): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/bookmark?new_state=${isBooked}${\n        categoryId && categoryId > 0 ? `&category=${categoryId}` : ''\n      }`,\n      method: Http.POST,\n    })\n  }\n\n  async rollDice(discussionId: string | number, postId: string | number): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/dice/${postId}/roll`,\n      method: Http.POST,\n    })\n  }\n\n  async rollDiceInHeader(\n    discussionId: string | number,\n    contentId: string | number,\n  ): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/content/dice/${contentId}/roll`,\n      method: Http.POST,\n    })\n  }\n\n  async voteInPoll(\n    discussionId: string | number,\n    postId: string | number,\n    answers: string[],\n  ): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/poll/${postId}/vote/${answers.toString()}`,\n      method: Http.POST,\n    })\n  }\n\n  async voteInHeaderPoll(\n    discussionId: string | number,\n    contentId: string | number,\n    answers: string[],\n  ): Promise<Partial<OnPostUpdatedResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/content/poll/${contentId}/vote/${answers.toString()}`,\n      method: Http.POST,\n    })\n  }\n\n  async postToDiscussion(discussionId: string | number, text: string): Promise<Partial<NyxResponse>> {\n    const data: any = { content: text }\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/send/text`,\n      method: Http.POST,\n      headers: this.getHeaders('application/x-www-form-urlencoded'),\n      body: Object.keys(data)\n        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n        .join('&'),\n    })\n  }\n\n  async deletePost(discussionId: string | number, postId: string | number): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `discussion/${discussionId}/delete/${postId}`,\n      method: Http.DELETE,\n    })\n  }\n\n  async uploadFile(file: File | any, discussionId?: string | number): Promise<Partial<UploadFileResponse>> {\n    const formData = new FormData()\n    formData.append('file', file)\n    formData.append('file_type', discussionId ? 'discussion_attachment' : 'mail_attachment') // free_file | discussion_attachment | mail_attachment\n    formData.append('id_specific', `${discussionId || 0}`)\n    return this.fetch({\n      endpoint: `file/upload`,\n      method: Http.PUT,\n      headers: {\n        Authorization: `Bearer ${this.auth.token}`,\n      },\n      body: formData,\n    })\n  }\n\n  async deleteFile(fileId: string | number): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `file/delete/${fileId}`,\n      method: Http.DELETE,\n    })\n  }\n\n  async subscribeForFCM(fcmToken: string, appIdentifier: string): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `register_for_notifications/${this.auth.token}/${appIdentifier}/${fcmToken}`,\n      method: Http.POST,\n    })\n  }\n\n  async unregisterFromFCM(fcmToken: string, appIdentifier: string): Promise<Partial<NyxResponse>> {\n    return this.fetch({\n      endpoint: `deregister_notifications/${this.auth.token}/${appIdentifier}/${fcmToken}`,\n      method: Http.POST,\n    })\n  }\n}\n", "import { NyxApi } from './NyxApi'\n\nexport { generateUuidV4, Observable, Observer } from './Observable'\n\nexport default NyxApi\n"],
  "mappings": "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",
  "names": []
}
